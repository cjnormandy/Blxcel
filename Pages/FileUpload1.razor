@page "/file-upload-1"
@using OfficeOpenXml;
@inject ILogger<FileUpload1> Logger

<h3>Upload Files</h3>

<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@if (res.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Population</th>
                <th>Country</th>
                <th>Area</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in res)
            {
                <tr>
                    @foreach (var col in row)
                    {
                        <td>@col</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private List<List<string>> res = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        res.Clear();
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
                string fp = @"/Users/cjnorman/Downloads/BlazorSample1.xlsx";
                FileInfo f = new FileInfo(fp);
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using (ExcelPackage package = new ExcelPackage(f))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
                    int rowCount = 7;
                    int colCount = 4;

                    for (int row = 2; row <= rowCount; row++)
                    {
                        List<string> rowData = new List<string>();
                        for (int col = 1; col <= colCount; col++)
                        {
                            String value = worksheet.Cells[row, col].Value?.ToString() ?? string.Empty;
                            if (value != string.Empty)
                            {
                                rowData.Add(value);
                            }
                        }
                        res.Add(rowData);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {FileName} Error: {Error}", 
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
}